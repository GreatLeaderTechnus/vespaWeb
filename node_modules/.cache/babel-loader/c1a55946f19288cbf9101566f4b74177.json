{"ast":null,"code":"var _jsxFileName = \"/Users/mmorteo/CodeShet/websites/calendarSite/src/components/Calendar.jsx\";\nimport React from \"react\";\nimport * as dateFns from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentMonth: new Date(),\n      selectedDate: new Date()\n    };\n\n    this.onDateClick = day => {\n      this.setState({\n        selectedDate: day\n      });\n    };\n\n    this.nextMonth = () => {\n      this.setState({\n        currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n      });\n    };\n\n    this.prevMonth = () => {\n      this.setState({\n        currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n      });\n    };\n  }\n\n  renderHeader() {\n    const dateFormat = \"MMMM yyyy\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header row flex-middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: this.prevMonth,\n          children: \"chevron_left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-center\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: dateFns.format(this.state.currentMonth, dateFormat)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-end\",\n        onClick: this.nextMonth,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          children: \"chevron_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderDays() {\n    const dateFormat = \"d\";\n    const days = [];\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-center\",\n        children: dateFns.format(dateFns.addDays(startDate, i), dateFormat)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days row\",\n      children: days\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderCells() {\n    const {\n      currentMonth,\n      selectedDate\n    } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"}`,\n          onClick: () => this.onDateClick(dateFns.parse(cloneDay)),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"number\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this));\n        day = dateFns.addDays(day, 1);\n      }\n\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: days\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this));\n      days = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [this.renderHeader(), this.renderDays(), this.renderCells()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/mmorteo/CodeShet/websites/calendarSite/src/components/Calendar.jsx"],"names":["React","dateFns","Calendar","Component","state","currentMonth","Date","selectedDate","onDateClick","day","setState","nextMonth","addMonths","prevMonth","subMonths","renderHeader","dateFormat","format","renderDays","days","startDate","startOfWeek","i","push","addDays","renderCells","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","isSameDay","parse","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as dateFns from 'date-fns'\n\nclass Calendar extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date()\n  };\n\n  renderHeader() {\n    const dateFormat = \"MMMM yyyy\";\n\n    return (\n      <div className=\"header row flex-middle\">\n        <div className=\"col col-start\">\n          <div className=\"icon\" onClick={this.prevMonth}>\n            chevron_left\n          </div>\n        </div>\n        <div className=\"col col-center\">\n          <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\n        </div>\n        <div className=\"col col-end\" onClick={this.nextMonth}>\n          <div className=\"icon\">chevron_right</div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = \"d\";\n    const days = [];\n\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n        </div>\n      );\n    }\n\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  renderCells() {\n    const { currentMonth, selectedDate } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n\n    const dateFormat = \"d\";\n    const rows = [];\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        days.push(\n          <div\n            className={`col cell ${\n              !dateFns.isSameMonth(day, monthStart)\n                ? \"disabled\"\n                : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\n            }`}\n            key={day}\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\n          >\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n          </div>\n        );\n        day = dateFns.addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n\n  onDateClick = day => {\n    this.setState({\n      selectedDate: day\n      \n    });\n  };\n\n  nextMonth = () => {\n    this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  prevMonth = () => {\n    this.setState({\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}